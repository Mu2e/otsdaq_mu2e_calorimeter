# -*- mode:tcl -*- 
#------------------------------------------------------------------------------
# usage: artdaqDriver -c srcs/otsdaq_mu2e_calorimeter/test_CalorimeterVST_001.fcl
# test_buffer
#------------------------------------------------------------------------------
#include "Offline/fcl/standardServices.fcl"

process_name: test001

events_to_generate : 10
run_number         : 401

source: {
    module_type: "ArtdaqInput"
}

services: { @table::Services.Reco 
    ArtdaqFragmentNamingServiceInterface: {
	helper_plugin   : "Mu2e"
	service_provider: "ArtdaqFragmentNamingService"
    }
    ArtdaqSharedMemoryServiceInterface: {
        resume_after_timeout: false
        service_provider    : "ArtdaqSharedMemoryService"
        waiting_time        : 1
    }

    DbService: {
        dbName: "mu2e_conditions_prd"
        purpose: "EMPTY"
        verbose: 0
        version: ""
    }
}

#------------------------------------------------------------------------------
# this is the FCL structure passed to the fragmentgenerator
#------------------------------------------------------------------------------
fragment_receiver: {
    generator              : Mu2eCaloEventReceiver    # daq generator plug-in type (defines the shared lib to load)
    fragment_ids                 : [ 0]       ## [ 0 , 11 ]      
}

event_builder: {
    use_art                             : true
    expected_fragments_per_event        : 1
    print_event_store_stats             : false
    verbose                             : false
    events_expected_in_SimpleQueueReader: @local::events_to_generate
    init_fragment_count                 : 0
    buffer_count                        : 1
    max_fragment_size_bytes             : 0x100000
}
art : {
	physics: {
	    analyzers:   {
		a1:    {
		    module_type: testFragments
		}
	    }
	     #t1: [a1] 
	    t1 :[ a1]
	    end_paths : [t1]

	}
}

outputs: {
    rootout:  { module_type: RootOutput
        fileName         : "raw.mu2e.calvst.annex.%06r_%08s.art"
        fileProperties   : { maxSize : 500000 granularity: SubRun }
        checkFileName	   : false
        compressionLevel : 0
    }
    out1:  {
        module_type: FileDumperOutput
        wantProductFriendlyClassName: true
    }
}

# outputs: {
#     rootNetOutput: {
# 	SelectEvents: []
# 	destinations: {}
# 	host_map: []
# 	module_type: "RootNetOutput"
# 	outputCommands: [
# 			 "drop *_*_*_*",
# 			 "keep mu2e::IntensityInfo*_*_*_*",
# 			 "keep mu2e::CaloHits_CaloHitMakerFast_caphri_*"
# 			]
# 	routing_table_config: {
# 	    use_routing_manager: false
# 	}
#     }
# }


